import React, { useState } from "react";
import Head from "next/head";
import { Patient } from "../types/patients";
import { sortPatientsByColumn } from "./utils";
import SortableTh from "./components/SortableTh"; // Ensure the import path is correct
import StyledTable from "./components/Table";
import StyledTr from "./components/Row";

export async function getServerSideProps() {
  const res = await fetch("http://localhost:3000/api/patients");
  const data = await res.json();
  return {
    props: {
      patients: data.patients,
    },
  };
}

type HomeProps = {
  patients: Patient[];
};

export default function Home({ patients }: HomeProps): JSX.Element {
  const [sortedPatients, setSortedPatients] = useState<Patient[]>(patients);
  const [sortedByColumn, setSortedByColumn] = useState<string>("");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc");

  const handleSort = (column: keyof Patient) => {
    const order =
      sortedByColumn === column && sortOrder === "asc" ? "desc" : "asc";
    const sorted = sortPatientsByColumn(sortedPatients, column, order);
    setSortedPatients(sorted);
    setSortedByColumn(column);
    setSortOrder(order);
  };

  return (
    <>
      <Head>
        <title>Stitch</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <h1>Patients</h1>
      </header>
      <main>
        <StyledTable>
          <thead>
            <StyledTr>
              <SortableTh
                column="firstName"
                label="Name"
                sortedByColumn={sortedByColumn}
                sortOrder={sortOrder}
                onSort={(column) => handleSort(column as keyof Patient)}
              />
              <SortableTh
                column="id"
                label="ID"
                sortedByColumn={sortedByColumn}
                sortOrder={sortOrder}
                onSort={(column) => handleSort(column as keyof Patient)}
              />
              <SortableTh
                column="dateOfBirth"
                label="Date of birth"
                sortedByColumn={sortedByColumn}
                sortOrder={sortOrder}
                onSort={(column) => handleSort(column as keyof Patient)}
              />
              <SortableTh
                column="dateOfRegistration"
                label="Registration date"
                sortedByColumn={sortedByColumn}
                sortOrder={sortOrder}
                onSort={(column) => handleSort(column as keyof Patient)}
              />
            </StyledTr>
          </thead>
          <tbody>
            {sortedPatients.map((patient) => (
              <StyledTr key={patient.id}>
                <td>{`${patient.firstName} ${patient.lastName}`}</td>
                <td>{patient.id}</td>
                <td>{patient.dateOfBirth}</td>
                <td>{patient.dateOfRegistration}</td>
              </StyledTr>
            ))}
          </tbody>
        </StyledTable>
      </main>
    </>
  );
}
